name: test
on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
env:
  NEXT_PUBLIC_API_URL: http://localhost
jobs:
  # Build job
  test:
    runs-on: ubuntu-latest
    services:
      api:
        image: daamian3/fleet-tracker:latest
        ports:
          - 9000:9000
        env:
          APP_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          APP_KEY: base64:lviwzEAdX0fsE0AYa3IbWmjsraNL9Gw7y8xUDF44u6U=
          APP_ENV: local
          APP_DEBUG: true
          DB_CONNECTION: mysql
          DB_HOST: mariadb
          DB_USERNAME: root
          DB_DATABASE: testing
          DB_PASSWORD: ''
          MAIL_MAILER: log
          BROADCAST_DRIVER: log
          QUEUE_CONNECTION: sync
          TELESCOPE_ENABLED: false
          LOG_CHANNEL: stderr
      mariadb:
        image: mariadb:10
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    timeout-minutes: 5
    strategy:
      matrix:
        node-version: [18]
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      coverage: ${{ steps.execute_tests.outputs.coverage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Extract branch name
        id: extract_branch
        run: |
          TMP_PULL_HEAD_REF="${{ github.head_ref }}"
          TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
          EXPORT_VALUE=""
          if [ "${TMP_PULL_HEAD_REF}" != "" ]
          then
              EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
          else
              EXPORT_VALUE="${TMP_GITHUB_REF}"
          fi
          echo "branch=${EXPORT_VALUE}" >> $GITHUB_OUTPUT
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            .cache/Cypress
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.json') }}-
      - name: Install dependencies
        run: pnpm install
      - run: |
          ls -a
          ls -a node_modules
          ls -a node_modules/cypress
      - name: Build app
        run: pnpm build
      - name: Unit and integration tests
        run: |
          pnpm test:ci
          COVERAGE="$( cat coverage/coverage-summary.json | jq -r '.total.lines.pct' )"
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
      - name: Setup API
        run: |
          CONTAINER_ID=$(docker ps --filter "ancestor=daamian3/fleet-tracker:latest" --format "{{.ID}}")
          docker exec $CONTAINER_ID bash -c "php artisan migrate --seed"
      - name: E2E tests
        uses: cypress-io/github-action@v6
        env:
          DEBUG: '@cypress/github-action'
        with:
          install: false
          start: |
            pnpm dev
            docker run -d --net host -p 80:80 -v ${{ github.workspace }}/.github/workflows/nginx.conf:/etc/nginx/conf.d/default.conf nginx:stable-alpine
          wait-on: 'http://localhost, http://localhost:3000'
          browser: chrome
      - name: Show API logs in case of tests failure
        if: failure()
        run: |
          CONTAINER_ID=$(docker ps --filter "ancestor=daamian3/fleet-tracker:latest" --format "{{.ID}}")
          docker logs $CONTAINER_ID
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/e2e/screenshots
          if-no-files-found: ignore
  badge:
    needs: unit
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: badges
          path: badges
      - name: Generate the coverage badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Code coverage'
          status: ${{ needs.unit.outputs.coverage }}%
          color: ${{
            needs.unit.outputs.coverage > 90 && 'green'              ||
            needs.unit.outputs.coverage > 80 && 'yellow'             ||
            needs.unit.outputs.coverage > 70 && 'orange'             ||
            'red' }}
          path: badges/coverage.svg
      - name: Push badge
        env:
          BRANCH: ${{ needs.unit.outputs.branch }}
        working-directory: ./badges
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          mkdir -p "${BRANCH}"

          mv coverage.svg "${BRANCH}"
          git add "${BRANCH}/coverage.svg"

          git commit --author "damianchojnacki <damianchojnacki@users.noreply.github.com>" -m "Add/Update badge [skip ci]" || true
          git push
